package com.cogmento.automation.web.page;

import com.cogmento.automation.web.page.UserPageTemplate;

import java.util.Map;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.NoSuchElementException;


/**
* @author  Code generated by ATFG (Automation Test Framework Generator) created by Harini Kumar <harini.kumar.email@gmail.com> & Shashikanth Rao <shashikanth.h.rao@gmail.com>
* @version 1.0
* @since   2021-09-20 
*/

public class CompanyAddOrEditPage extends UserPageTemplate {
	
		//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By cancelLocator = By.xpath("//button[contains(text(),'Cancel')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By saveLocator = By.xpath("//button[@class='ui linkedin button']");

	//ElementType:txt  Description:Text box or text area
	private By nameLocator = By.xpath("//input[@name='name' and @placeholder='']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By accessLocator = By.xpath("//button[@class='ui small fluid positive toggle button']");

	//ElementType:singleSelList  Description:single select List
	private By usersAllowedLocator = By.xpath("//div[@class='twelve wide field']");

	//ElementType:txt  Description:Text box or text area
	private By websiteLocator = By.xpath("//input[@name='url']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By fetchLocator = By.xpath("//button[contains(text(),'Fetch')]");

	//ElementType:stack  Description:Stack. Example a stack of phone numbers that includes elements phone country code and phone number
	private By addressLocator = By.xpath("//div/label[text()='Address']/../div/div[@class='six wide fields']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By streetAddressLocator = By.xpath("//input[@placeholder='Street Address']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By cityLocator = By.xpath("//input[@placeholder='City']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By stateLocator = By.xpath("//input[@placeholder='State / County']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By postcodeLocator = By.xpath("//input[@name='zip']");

	//ElementType:singleSelListInStack  Description:Single SelectList in a stack. This a a single select list element that is part of a stack
	private By countryLocator = By.xpath("//div[@name='country']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By addressDeleteLocator = By.xpath("//i[@class='remove icon']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By addressAddLocator = By.xpath("//div/label[text()='Address']/../div/div[@class='six wide fields']/div/button/i[@class='add icon']");

	//ElementType:stack  Description:Stack. Example a stack of phone numbers that includes elements phone country code and phone number
	private By phoneLocator = By.xpath("//div/label[text()='Phone']/../div/div[@class='four fields']");

	//ElementType:singleSelListInStack  Description:Single SelectList in a stack. This a a single select list element that is part of a stack
	private By phoneCountryLocator = By.xpath("//div[@name='hint']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By phoneNumberLocator = By.xpath("//input[@placeholder='Number']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By phoneTypeLocator = By.xpath("//input[@placeholder='Home, Work, Mobile...']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By phoneDeleteLocator = By.xpath("//div/label[text()='Phone']/../div/div[@class='four fields']/div/button/i[@class='remove icon']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By phoneAddLocator = By.xpath("//div/label[text()='Phone']/../div/div[@class='four fields']/div/button/i[@class='add icon']");

	//ElementType:txt  Description:Text box or text area
	private By tagsLocator = By.xpath("//label[@for='tags']");

	//ElementType:txt  Description:Text box or text area
	private By descriptionLocator = By.xpath("//textarea[@name='description']");

	//ElementType:stack  Description:Stack. Example a stack of phone numbers that includes elements phone country code and phone number
	private By socialChannelsLocator = By.xpath("//div/label[text()='Social Channels']/../div/div[@class='three fields']");

	//ElementType:singleSelListInStack  Description:Single SelectList in a stack. This a a single select list element that is part of a stack
	private By socialChannelNameLocator = By.xpath("//div/label[text()='Social Channels']/../div/div[@class='three fields']/div/div[@name='channel_type']");

	//ElementType:txtInStack  Description:Text in Stack. This a a text element that is part of a stack
	private By socialChannelValueLocator = By.xpath("//div/label[text()='Social Channels']/../div/div[@class='three fields']/div/div/input[@name='value']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By socialChannelDeleteLocator = By.xpath("//div/label[text()='Social Channels']/../div/div[@class='three fields']/div/button/i[@class='remove icon']");

	//ElementType:defInStack  Description:Default Element in a stack. Example a button or link that is part of a stack
	private By socialChannelAddLocator = By.xpath("//div/label[text()='Social Channels']/../div/div[@class='three fields']/div/button/i[@class='add icon']");

	//ElementType:txt  Description:Text box or text area
	private By industryLocator = By.xpath("//input[@name='industry']");

	//ElementType:txt  Description:Text box or text area
	private By numberOfEmployeesLocator = By.xpath("//input[@name='num_employees']");

	//ElementType:txt  Description:Text box or text area
	private By stockSymbolLocator = By.xpath("//input[@name='symbol']");

	//ElementType:txt  Description:Text box or text area
	private By annualRevenueLocator = By.xpath("//input[@name='annual_revenue']");

	//ElementType:singleSelList  Description:single select List
	private By priorityLocator = By.xpath("//div[@name='priority']");

	//ElementType:singleSelList  Description:single select List
	private By statusLocator = By.xpath("//div[@name='status']");

	//ElementType:singleSelList  Description:single select List
	private By sourceLocator = By.xpath("//div[@name='source']");

	//ElementType:singleSelList  Description:single select List
	private By categoryLocator = By.xpath("//div[@name='category']");

	//ElementType:txt  Description:Text box or text area
	private By vatNumberLocator = By.xpath("//input[@name='vat_number']");

	//ElementType:txt  Description:Text box or text area
	private By identifierLocator = By.xpath("//input[@name='identifier']");

	//ElementType:txtFileUpload  Description:Text Element that is associated with FileUpload and needs to have TODO to alert the developer
	private By logoLocator = By.xpath("//input[@name='image']");

	public CompanyAddOrEditPage(WebDriver driver) {
		super(driver);
	}
	//cancel methods
	
	public void initialize(Map<String, String> company){
		this.setTextName(company.get("Name"));
		this.setTextWebsite(company.get("Website"));
		
	}
	 
	public By getCancelLocator() {
		return cancelLocator;
	}
	
	public WebElement getCancel() {
		return getDriver().findElement(cancelLocator);		
	}

	public void goToCancel() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCancel()).build().perform();					
	}
	
	public void clickCancel() {
		getCancel().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCancel()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCancel());								
	}
	//save methods
	 
	public By getSaveLocator() {
		return saveLocator;
	}
	
	public WebElement getSave() {
		return getDriver().findElement(saveLocator);		
	}

	public void goToSave() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getSave()).build().perform();					
	}
	
	public void clickSave() {
		getSave().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getSave()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getSave());								
	}
	//name methods
	
	public By getNameLocator() {
		return nameLocator;
	}
	
	public WebElement getName() {
		return getDriver().findElement(nameLocator);
	}

	public void goToName() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getName()).build().perform();						
	}
	
	public void clickName() {
		getName().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getName()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getName());						
	}
		
	public void clearTextName() {
		getName().clear();						
	}
	
	public void setTextName(String text) {
		clickName();
		getName().clear();
		getName().sendKeys(text);
	}

	public String getTextName() {
		return getName().getText();
	}
		//access methods
	 
	public By getAccessLocator() {
		return accessLocator;
	}
	
	public WebElement getAccess() {
		return getDriver().findElement(accessLocator);		
	}

	public void goToAccess() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getAccess()).build().perform();					
	}
	
	public void clickAccess() {
		getAccess().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getAccess()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getAccess());								
	}
	//usersAllowed methods
	 
	public By getUsersAllowedLocator() {
		return usersAllowedLocator;
	}
	
	public WebElement getUsersAllowed() {
		return getDriver().findElement(usersAllowedLocator);		
	}
	
	public void selectUsersAllowed(String s) {		
		//TODO		
	}

	public void selectUsersAllowed(int index) {		
		//TODO		
	}
	
	
	public String getSelectedUsersAllowed() {		
		//TODO
		return null;				
	}	//website methods
	
	public By getWebsiteLocator() {
		return websiteLocator;
	}
	
	public WebElement getWebsite() {
		return getDriver().findElement(websiteLocator);
	}

	public void goToWebsite() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getWebsite()).build().perform();						
	}
	
	public void clickWebsite() {
		getWebsite().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getWebsite()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getWebsite());						
	}
		
	public void clearTextWebsite() {
		getWebsite().clear();						
	}
	
	public void setTextWebsite(String text) {
		clickWebsite();
		getWebsite().clear();
		getWebsite().sendKeys(text);
	}

	public String getTextWebsite() {
		return getWebsite().getText();
	}
		//fetch methods
	 
	public By getFetchLocator() {
		return fetchLocator;
	}
	
	public WebElement getFetch() {
		return getDriver().findElement(fetchLocator);		
	}

	public void goToFetch() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getFetch()).build().perform();					
	}
	
	public void clickFetch() {
		getFetch().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getFetch()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getFetch());								
	}
	//address methods
	 
	public By getAddressLocator() {
		return addressLocator;
	}
	
	public WebElement getAddress() {
		return getDriver().findElement(addressLocator);
	}
	
	public int stackSizeOfAddress() {
		return getDriver().findElements(addressLocator).size();
	}	//streetAddress methods
	
	public By getStreetAddressLocator() {
		return streetAddressLocator;
	}
	
	public WebElement getStreetAddress(int stackIndex) {
		return getDriver().findElements(streetAddressLocator).get(stackIndex);
	}

	public void goToStreetAddress(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getStreetAddress(stackIndex)).build().perform();						
	}
	
	public void clickStreetAddress(int stackIndex) {
		getStreetAddress(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getStreetAddress(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getStreetAddress(stackIndex));						
	}
		
	public void clearTextStreetAddress(int stackIndex) {
		getStreetAddress(stackIndex).clear();						
	}
	
	public void setTextStreetAddress(String text, int stackIndex) {
		clickStreetAddress(stackIndex);
		getStreetAddress(stackIndex).clear();
		getStreetAddress(stackIndex).sendKeys(text);
	}

	public String getTextStreetAddress(int stackIndex) {
		return getStreetAddress(stackIndex).getText();
	}
		//city methods
	
	public By getCityLocator() {
		return cityLocator;
	}
	
	public WebElement getCity(int stackIndex) {
		return getDriver().findElements(cityLocator).get(stackIndex);
	}

	public void goToCity(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCity(stackIndex)).build().perform();						
	}
	
	public void clickCity(int stackIndex) {
		getCity(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCity(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCity(stackIndex));						
	}
		
	public void clearTextCity(int stackIndex) {
		getCity(stackIndex).clear();						
	}
	
	public void setTextCity(String text, int stackIndex) {
		clickCity(stackIndex);
		getCity(stackIndex).clear();
		getCity(stackIndex).sendKeys(text);
	}

	public String getTextCity(int stackIndex) {
		return getCity(stackIndex).getText();
	}
		//state methods
	
	public By getStateLocator() {
		return stateLocator;
	}
	
	public WebElement getState(int stackIndex) {
		return getDriver().findElements(stateLocator).get(stackIndex);
	}

	public void goToState(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getState(stackIndex)).build().perform();						
	}
	
	public void clickState(int stackIndex) {
		getState(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getState(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getState(stackIndex));						
	}
		
	public void clearTextState(int stackIndex) {
		getState(stackIndex).clear();						
	}
	
	public void setTextState(String text, int stackIndex) {
		clickState(stackIndex);
		getState(stackIndex).clear();
		getState(stackIndex).sendKeys(text);
	}

	public String getTextState(int stackIndex) {
		return getState(stackIndex).getText();
	}
		//postcode methods
	
	public By getPostcodeLocator() {
		return postcodeLocator;
	}
	
	public WebElement getPostcode(int stackIndex) {
		return getDriver().findElements(postcodeLocator).get(stackIndex);
	}

	public void goToPostcode(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPostcode(stackIndex)).build().perform();						
	}
	
	public void clickPostcode(int stackIndex) {
		getPostcode(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPostcode(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPostcode(stackIndex));						
	}
		
	public void clearTextPostcode(int stackIndex) {
		getPostcode(stackIndex).clear();						
	}
	
	public void setTextPostcode(String text, int stackIndex) {
		clickPostcode(stackIndex);
		getPostcode(stackIndex).clear();
		getPostcode(stackIndex).sendKeys(text);
	}

	public String getTextPostcode(int stackIndex) {
		return getPostcode(stackIndex).getText();
	}
		//country methods
	 
	public By getCountryLocator() {
		return countryLocator;
	}
	
	public WebElement getCountry(int stackIndex) {		
		if (getDriver().findElements(countryLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(countryLocator).get(stackIndex);
		}
	}
	
	public void selectCountry(int stackIndex, String s) {		
		//TODO		
	}

	public void selectCountry(int stackIndex, int elementIndex) {		
		//TODO		
	}
	
	
	public String getSelectedCountry(int stackIndex) {		
		//TODO
		return null;				
	}	//addressDelete methods
	
	public By getAddressDeleteLocator() {
		return addressDeleteLocator;
	}
	
	public WebElement getAddressDelete(int stackIndex) {
		if (getDriver().findElements(addressDeleteLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(addressDeleteLocator).get(stackIndex);
		}
	}

	public void goToAddressDelete(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getAddressDelete(stackIndex)).build().perform();					
	}
	
	public void clickAddressDelete(int stackIndex) {
		getAddressDelete(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getAddressDelete(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getAddressDelete(stackIndex));						
	}
	//addressAdd methods
	
	public By getAddressAddLocator() {
		return addressAddLocator;
	}
	
	public WebElement getAddressAdd(int stackIndex) {
		if (getDriver().findElements(addressAddLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(addressAddLocator).get(stackIndex);
		}
	}

	public void goToAddressAdd(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getAddressAdd(stackIndex)).build().perform();					
	}
	
	public void clickAddressAdd(int stackIndex) {
		getAddressAdd(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getAddressAdd(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getAddressAdd(stackIndex));						
	}
	//phone methods
	 
	public By getPhoneLocator() {
		return phoneLocator;
	}
	
	public WebElement getPhone() {
		return getDriver().findElement(phoneLocator);
	}
	
	public int stackSizeOfPhone() {
		return getDriver().findElements(phoneLocator).size();
	}	//phoneCountry methods
	 
	public By getPhoneCountryLocator() {
		return phoneCountryLocator;
	}
	
	public WebElement getPhoneCountry(int stackIndex) {		
		if (getDriver().findElements(phoneCountryLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(phoneCountryLocator).get(stackIndex);
		}
	}
	
	public void selectPhoneCountry(int stackIndex, String s) {		
		//TODO		
	}

	public void selectPhoneCountry(int stackIndex, int elementIndex) {		
		//TODO		
	}
	
	
	public String getSelectedPhoneCountry(int stackIndex) {		
		//TODO
		return null;				
	}	//phoneNumber methods
	
	public By getPhoneNumberLocator() {
		return phoneNumberLocator;
	}
	
	public WebElement getPhoneNumber(int stackIndex) {
		return getDriver().findElements(phoneNumberLocator).get(stackIndex);
	}

	public void goToPhoneNumber(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPhoneNumber(stackIndex)).build().perform();						
	}
	
	public void clickPhoneNumber(int stackIndex) {
		getPhoneNumber(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPhoneNumber(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPhoneNumber(stackIndex));						
	}
		
	public void clearTextPhoneNumber(int stackIndex) {
		getPhoneNumber(stackIndex).clear();						
	}
	
	public void setTextPhoneNumber(String text, int stackIndex) {
		clickPhoneNumber(stackIndex);
		getPhoneNumber(stackIndex).clear();
		getPhoneNumber(stackIndex).sendKeys(text);
	}

	public String getTextPhoneNumber(int stackIndex) {
		return getPhoneNumber(stackIndex).getText();
	}
		//phoneType methods
	
	public By getPhoneTypeLocator() {
		return phoneTypeLocator;
	}
	
	public WebElement getPhoneType(int stackIndex) {
		return getDriver().findElements(phoneTypeLocator).get(stackIndex);
	}

	public void goToPhoneType(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPhoneType(stackIndex)).build().perform();						
	}
	
	public void clickPhoneType(int stackIndex) {
		getPhoneType(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPhoneType(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPhoneType(stackIndex));						
	}
		
	public void clearTextPhoneType(int stackIndex) {
		getPhoneType(stackIndex).clear();						
	}
	
	public void setTextPhoneType(String text, int stackIndex) {
		clickPhoneType(stackIndex);
		getPhoneType(stackIndex).clear();
		getPhoneType(stackIndex).sendKeys(text);
	}

	public String getTextPhoneType(int stackIndex) {
		return getPhoneType(stackIndex).getText();
	}
		//phoneDelete methods
	
	public By getPhoneDeleteLocator() {
		return phoneDeleteLocator;
	}
	
	public WebElement getPhoneDelete(int stackIndex) {
		if (getDriver().findElements(phoneDeleteLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(phoneDeleteLocator).get(stackIndex);
		}
	}

	public void goToPhoneDelete(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPhoneDelete(stackIndex)).build().perform();					
	}
	
	public void clickPhoneDelete(int stackIndex) {
		getPhoneDelete(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPhoneDelete(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPhoneDelete(stackIndex));						
	}
	//phoneAdd methods
	
	public By getPhoneAddLocator() {
		return phoneAddLocator;
	}
	
	public WebElement getPhoneAdd(int stackIndex) {
		if (getDriver().findElements(phoneAddLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(phoneAddLocator).get(stackIndex);
		}
	}

	public void goToPhoneAdd(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPhoneAdd(stackIndex)).build().perform();					
	}
	
	public void clickPhoneAdd(int stackIndex) {
		getPhoneAdd(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPhoneAdd(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPhoneAdd(stackIndex));						
	}
	//tags methods
	
	public By getTagsLocator() {
		return tagsLocator;
	}
	
	public WebElement getTags() {
		return getDriver().findElement(tagsLocator);
	}

	public void goToTags() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getTags()).build().perform();						
	}
	
	public void clickTags() {
		getTags().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getTags()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getTags());						
	}
		
	public void clearTextTags() {
		getTags().clear();						
	}
	
	public void setTextTags(String text) {
		clickTags();
		getTags().clear();
		getTags().sendKeys(text);
	}

	public String getTextTags() {
		return getTags().getText();
	}
		//description methods
	
	public By getDescriptionLocator() {
		return descriptionLocator;
	}
	
	public WebElement getDescription() {
		return getDriver().findElement(descriptionLocator);
	}

	public void goToDescription() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDescription()).build().perform();						
	}
	
	public void clickDescription() {
		getDescription().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDescription()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDescription());						
	}
		
	public void clearTextDescription() {
		getDescription().clear();						
	}
	
	public void setTextDescription(String text) {
		clickDescription();
		getDescription().clear();
		getDescription().sendKeys(text);
	}

	public String getTextDescription() {
		return getDescription().getText();
	}
		//socialChannels methods
	 
	public By getSocialChannelsLocator() {
		return socialChannelsLocator;
	}
	
	public WebElement getSocialChannels() {
		return getDriver().findElement(socialChannelsLocator);
	}
	
	public int stackSizeOfSocialChannels() {
		return getDriver().findElements(socialChannelsLocator).size();
	}	//socialChannelName methods
	 
	public By getSocialChannelNameLocator() {
		return socialChannelNameLocator;
	}
	
	public WebElement getSocialChannelName(int stackIndex) {		
		if (getDriver().findElements(socialChannelNameLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(socialChannelNameLocator).get(stackIndex);
		}
	}
	
	public void selectSocialChannelName(int stackIndex, String s) {		
		//TODO		
	}

	public void selectSocialChannelName(int stackIndex, int elementIndex) {		
		//TODO		
	}
	
	
	public String getSelectedSocialChannelName(int stackIndex) {		
		//TODO
		return null;				
	}	//socialChannelValue methods
	
	public By getSocialChannelValueLocator() {
		return socialChannelValueLocator;
	}
	
	public WebElement getSocialChannelValue(int stackIndex) {
		return getDriver().findElements(socialChannelValueLocator).get(stackIndex);
	}

	public void goToSocialChannelValue(int stackIndex) {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getSocialChannelValue(stackIndex)).build().perform();						
	}
	
	public void clickSocialChannelValue(int stackIndex) {
		getSocialChannelValue(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getSocialChannelValue(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getSocialChannelValue(stackIndex));						
	}
		
	public void clearTextSocialChannelValue(int stackIndex) {
		getSocialChannelValue(stackIndex).clear();						
	}
	
	public void setTextSocialChannelValue(String text, int stackIndex) {
		clickSocialChannelValue(stackIndex);
		getSocialChannelValue(stackIndex).clear();
		getSocialChannelValue(stackIndex).sendKeys(text);
	}

	public String getTextSocialChannelValue(int stackIndex) {
		return getSocialChannelValue(stackIndex).getText();
	}
		//socialChannelDelete methods
	
	public By getSocialChannelDeleteLocator() {
		return socialChannelDeleteLocator;
	}
	
	public WebElement getSocialChannelDelete(int stackIndex) {
		if (getDriver().findElements(socialChannelDeleteLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(socialChannelDeleteLocator).get(stackIndex);
		}
	}

	public void goToSocialChannelDelete(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getSocialChannelDelete(stackIndex)).build().perform();					
	}
	
	public void clickSocialChannelDelete(int stackIndex) {
		getSocialChannelDelete(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getSocialChannelDelete(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getSocialChannelDelete(stackIndex));						
	}
	//socialChannelAdd methods
	
	public By getSocialChannelAddLocator() {
		return socialChannelAddLocator;
	}
	
	public WebElement getSocialChannelAdd(int stackIndex) {
		if (getDriver().findElements(socialChannelAddLocator).isEmpty()) {
			throw new NoSuchElementException("findElements() method for the element $elementname returned an empty list");
		} else {
			return getDriver().findElements(socialChannelAddLocator).get(stackIndex);
		}
	}

	public void goToSocialChannelAdd(int stackIndex) {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getSocialChannelAdd(stackIndex)).build().perform();					
	}
	
	public void clickSocialChannelAdd(int stackIndex) {
		getSocialChannelAdd(stackIndex).click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getSocialChannelAdd(stackIndex)).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getSocialChannelAdd(stackIndex));						
	}
	//industry methods
	
	public By getIndustryLocator() {
		return industryLocator;
	}
	
	public WebElement getIndustry() {
		return getDriver().findElement(industryLocator);
	}

	public void goToIndustry() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getIndustry()).build().perform();						
	}
	
	public void clickIndustry() {
		getIndustry().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getIndustry()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getIndustry());						
	}
		
	public void clearTextIndustry() {
		getIndustry().clear();						
	}
	
	public void setTextIndustry(String text) {
		clickIndustry();
		getIndustry().clear();
		getIndustry().sendKeys(text);
	}

	public String getTextIndustry() {
		return getIndustry().getText();
	}
		//numberOfEmployees methods
	
	public By getNumberOfEmployeesLocator() {
		return numberOfEmployeesLocator;
	}
	
	public WebElement getNumberOfEmployees() {
		return getDriver().findElement(numberOfEmployeesLocator);
	}

	public void goToNumberOfEmployees() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getNumberOfEmployees()).build().perform();						
	}
	
	public void clickNumberOfEmployees() {
		getNumberOfEmployees().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getNumberOfEmployees()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getNumberOfEmployees());						
	}
		
	public void clearTextNumberOfEmployees() {
		getNumberOfEmployees().clear();						
	}
	
	public void setTextNumberOfEmployees(String text) {
		clickNumberOfEmployees();
		getNumberOfEmployees().clear();
		getNumberOfEmployees().sendKeys(text);
	}

	public String getTextNumberOfEmployees() {
		return getNumberOfEmployees().getText();
	}
		//stockSymbol methods
	
	public By getStockSymbolLocator() {
		return stockSymbolLocator;
	}
	
	public WebElement getStockSymbol() {
		return getDriver().findElement(stockSymbolLocator);
	}

	public void goToStockSymbol() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getStockSymbol()).build().perform();						
	}
	
	public void clickStockSymbol() {
		getStockSymbol().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getStockSymbol()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getStockSymbol());						
	}
		
	public void clearTextStockSymbol() {
		getStockSymbol().clear();						
	}
	
	public void setTextStockSymbol(String text) {
		clickStockSymbol();
		getStockSymbol().clear();
		getStockSymbol().sendKeys(text);
	}

	public String getTextStockSymbol() {
		return getStockSymbol().getText();
	}
		//annualRevenue methods
	
	public By getAnnualRevenueLocator() {
		return annualRevenueLocator;
	}
	
	public WebElement getAnnualRevenue() {
		return getDriver().findElement(annualRevenueLocator);
	}

	public void goToAnnualRevenue() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getAnnualRevenue()).build().perform();						
	}
	
	public void clickAnnualRevenue() {
		getAnnualRevenue().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getAnnualRevenue()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getAnnualRevenue());						
	}
		
	public void clearTextAnnualRevenue() {
		getAnnualRevenue().clear();						
	}
	
	public void setTextAnnualRevenue(String text) {
		clickAnnualRevenue();
		getAnnualRevenue().clear();
		getAnnualRevenue().sendKeys(text);
	}

	public String getTextAnnualRevenue() {
		return getAnnualRevenue().getText();
	}
		//priority methods
	 
	public By getPriorityLocator() {
		return priorityLocator;
	}
	
	public WebElement getPriority() {
		return getDriver().findElement(priorityLocator);		
	}
	
	public void selectPriority(String s) {		
		//TODO		
	}

	public void selectPriority(int index) {		
		//TODO		
	}
	
	
	public String getSelectedPriority() {		
		//TODO
		return null;				
	}	//status methods
	 
	public By getStatusLocator() {
		return statusLocator;
	}
	
	public WebElement getStatus() {
		return getDriver().findElement(statusLocator);		
	}
	
	public void selectStatus(String s) {		
		//TODO		
	}

	public void selectStatus(int index) {		
		//TODO		
	}
	
	
	public String getSelectedStatus() {		
		//TODO
		return null;				
	}	//source methods
	 
	public By getSourceLocator() {
		return sourceLocator;
	}
	
	public WebElement getSource() {
		return getDriver().findElement(sourceLocator);		
	}
	
	public void selectSource(String s) {		
		//TODO		
	}

	public void selectSource(int index) {		
		//TODO		
	}
	
	
	public String getSelectedSource() {		
		//TODO
		return null;				
	}	//category methods
	 
	public By getCategoryLocator() {
		return categoryLocator;
	}
	
	public WebElement getCategory() {
		return getDriver().findElement(categoryLocator);		
	}
	
	public void selectCategory(String s) {		
		//TODO		
	}

	public void selectCategory(int index) {		
		//TODO		
	}
	
	
	public String getSelectedCategory() {		
		//TODO
		return null;				
	}	//vatNumber methods
	
	public By getVatNumberLocator() {
		return vatNumberLocator;
	}
	
	public WebElement getVatNumber() {
		return getDriver().findElement(vatNumberLocator);
	}

	public void goToVatNumber() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getVatNumber()).build().perform();						
	}
	
	public void clickVatNumber() {
		getVatNumber().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getVatNumber()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getVatNumber());						
	}
		
	public void clearTextVatNumber() {
		getVatNumber().clear();						
	}
	
	public void setTextVatNumber(String text) {
		clickVatNumber();
		getVatNumber().clear();
		getVatNumber().sendKeys(text);
	}

	public String getTextVatNumber() {
		return getVatNumber().getText();
	}
		//identifier methods
	
	public By getIdentifierLocator() {
		return identifierLocator;
	}
	
	public WebElement getIdentifier() {
		return getDriver().findElement(identifierLocator);
	}

	public void goToIdentifier() {	    
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getIdentifier()).build().perform();						
	}
	
	public void clickIdentifier() {
		getIdentifier().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getIdentifier()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getIdentifier());						
	}
		
	public void clearTextIdentifier() {
		getIdentifier().clear();						
	}
	
	public void setTextIdentifier(String text) {
		clickIdentifier();
		getIdentifier().clear();
		getIdentifier().sendKeys(text);
	}

	public String getTextIdentifier() {
		return getIdentifier().getText();
	}
		//logo methods
	
	public By getLogoLocator() {
		return logoLocator;
	}
	
	public WebElement getLogo() {
		return getDriver().findElement(logoLocator);
	}

	public void fileUploadLogo(String exeFileName, String browserName) {
		getLogo().click();
		//TODO: change exeFilePath if necessary
		String exeFilePath = System.getProperty("user.dir") + "/script/autoit/fileUpload/"
				+ browserName + "/" + exeFileName;
		try {
			Runtime.getRuntime().exec(exeFilePath);
		} catch (java.io.IOException e) {
			e.printStackTrace();
		}
	}

}