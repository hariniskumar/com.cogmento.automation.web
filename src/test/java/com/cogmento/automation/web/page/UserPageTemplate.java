package com.cogmento.automation.web.page;

import com.cogmento.automation.web.page.GenericPage;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.NoSuchElementException;


/**
* @author  Code generated by ATFG (Automation Test Framework Generator) created by Harini Kumar <harini.kumar.email@gmail.com> & Shashikanth Rao <shashikanth.h.rao@gmail.com>
* @version 1.0
* @since   2021-09-20 
*/

public class UserPageTemplate extends GenericPage {
	
		//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By homeLocator = By.xpath("//span[contains(text(),'Home')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By calendarLocator = By.xpath("//span[contains(text(),'Calendar')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By calendarAddLocator = By.xpath("//span[contains(text(),'Calendar')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By contactsLocator = By.xpath("//span[contains(text(),'Contacts')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By contactAddLocator = By.xpath("//span[contains(text(),'Contacts')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By companiesLocator = By.xpath("//span[contains(text(),'Companies')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By companyAddLocator = By.xpath("//span[contains(text(),'Companies')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By dealsLocator = By.xpath("//span[contains(text(),'Deals')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By dealAddLocator = By.xpath("//span[contains(text(),'Deals')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By tasksLocator = By.xpath("//span[contains(text(),'Tasks')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By taskAddLocator = By.xpath("//span[contains(text(),'Tasks')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By casesLocator = By.xpath("//span[contains(text(),'Cases')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By caseAddLocator = By.xpath("//span[contains(text(),'Cases')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By callsLocator = By.xpath("//span[contains(text(),'Calls')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By callAddLocator = By.xpath("//span[contains(text(),'Calls')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By documentsLocator = By.xpath("//span[contains(text(),'Documents')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By documentAddLocator = By.xpath("//span[contains(text(),'Documents')]/../../button/i[@class='plus inverted icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By emailLocator = By.xpath("//span[contains(text(),'Email')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By campaignsLocator = By.xpath("//span[contains(text(),'Campaigns')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By formsLocator = By.xpath("//span[contains(text(),'Forms')]");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By nameDisplayLocator = By.xpath("//span[@class='user-display']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By pinnedRecordsLocator = By.xpath("//i[@class='pin icon']");

	//ElementType:def  Description:Default Element. Link, button etc.. That are clickable
	private By deleteRecordsLocator = By.xpath("//i[ @class='trash alternate outline icon']");

	public UserPageTemplate(WebDriver driver) {
		super(driver);
	}
	//home methods
	 
	public By getHomeLocator() {
		return homeLocator;
	}
	
	public WebElement getHome() {
		return getDriver().findElement(homeLocator);		
	}

	public void goToHome() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getHome()).build().perform();					
	}
	
	public void clickHome() {
		getHome().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getHome()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getHome());								
	}
	//calendar methods
	 
	public By getCalendarLocator() {
		return calendarLocator;
	}
	
	public WebElement getCalendar() {
		return getDriver().findElement(calendarLocator);		
	}

	public void goToCalendar() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCalendar()).build().perform();					
	}
	
	public void clickCalendar() {
		getCalendar().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCalendar()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCalendar());								
	}
	//calendarAdd methods
	
	public By getCalendarAddLocator() {
		return calendarAddLocator;
	}
	
	public WebElement getCalendarAdd() {
		goToCalendar();
		return getDriver().findElement(calendarAddLocator);
	}

	public void goToCalendarAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCalendarAdd()).build().perform();						
	}
	
	public void clickCalendarAdd() {
		getCalendarAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCalendarAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCalendarAdd());						
	}
	//contacts methods
	 
	public By getContactsLocator() {
		return contactsLocator;
	}
	
	public WebElement getContacts() {
		return getDriver().findElement(contactsLocator);		
	}

	public void goToContacts() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getContacts()).build().perform();					
	}
	
	public void clickContacts() {
		getContacts().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getContacts()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getContacts());								
	}
	//contactAdd methods
	
	public By getContactAddLocator() {
		return contactAddLocator;
	}
	
	public WebElement getContactAdd() {
		goToContacts();
		return getDriver().findElement(contactAddLocator);
	}

	public void goToContactAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getContactAdd()).build().perform();						
	}
	
	public void clickContactAdd() {
		getContactAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getContactAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getContactAdd());						
	}
	//companies methods
	 
	public By getCompaniesLocator() {
		return companiesLocator;
	}
	
	public WebElement getCompanies() {
		return getDriver().findElement(companiesLocator);		
	}

	public void goToCompanies() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCompanies()).build().perform();					
	}
	
	public void clickCompanies() {
		getCompanies().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCompanies()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCompanies());								
	}
	//companyAdd methods
	
	public By getCompanyAddLocator() {
		return companyAddLocator;
	}
	
	public WebElement getCompanyAdd() {
		goToCompanies();
		return getDriver().findElement(companyAddLocator);
	}

	public void goToCompanyAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCompanyAdd()).build().perform();						
	}
	
	public void clickCompanyAdd() {
		getCompanyAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCompanyAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCompanyAdd());						
	}
	//deals methods
	 
	public By getDealsLocator() {
		return dealsLocator;
	}
	
	public WebElement getDeals() {
		return getDriver().findElement(dealsLocator);		
	}

	public void goToDeals() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDeals()).build().perform();					
	}
	
	public void clickDeals() {
		getDeals().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDeals()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDeals());								
	}
	//dealAdd methods
	
	public By getDealAddLocator() {
		return dealAddLocator;
	}
	
	public WebElement getDealAdd() {
		goToDeals();
		return getDriver().findElement(dealAddLocator);
	}

	public void goToDealAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDealAdd()).build().perform();						
	}
	
	public void clickDealAdd() {
		getDealAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDealAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDealAdd());						
	}
	//tasks methods
	 
	public By getTasksLocator() {
		return tasksLocator;
	}
	
	public WebElement getTasks() {
		return getDriver().findElement(tasksLocator);		
	}

	public void goToTasks() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getTasks()).build().perform();					
	}
	
	public void clickTasks() {
		getTasks().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getTasks()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getTasks());								
	}
	//taskAdd methods
	
	public By getTaskAddLocator() {
		return taskAddLocator;
	}
	
	public WebElement getTaskAdd() {
		goToTasks();
		return getDriver().findElement(taskAddLocator);
	}

	public void goToTaskAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getTaskAdd()).build().perform();						
	}
	
	public void clickTaskAdd() {
		getTaskAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getTaskAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getTaskAdd());						
	}
	//cases methods
	 
	public By getCasesLocator() {
		return casesLocator;
	}
	
	public WebElement getCases() {
		return getDriver().findElement(casesLocator);		
	}

	public void goToCases() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCases()).build().perform();					
	}
	
	public void clickCases() {
		getCases().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCases()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCases());								
	}
	//caseAdd methods
	
	public By getCaseAddLocator() {
		return caseAddLocator;
	}
	
	public WebElement getCaseAdd() {
		goToCases();
		return getDriver().findElement(caseAddLocator);
	}

	public void goToCaseAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCaseAdd()).build().perform();						
	}
	
	public void clickCaseAdd() {
		getCaseAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCaseAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCaseAdd());						
	}
	//calls methods
	 
	public By getCallsLocator() {
		return callsLocator;
	}
	
	public WebElement getCalls() {
		return getDriver().findElement(callsLocator);		
	}

	public void goToCalls() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCalls()).build().perform();					
	}
	
	public void clickCalls() {
		getCalls().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCalls()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCalls());								
	}
	//callAdd methods
	
	public By getCallAddLocator() {
		return callAddLocator;
	}
	
	public WebElement getCallAdd() {
		goToCalls();
		return getDriver().findElement(callAddLocator);
	}

	public void goToCallAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCallAdd()).build().perform();						
	}
	
	public void clickCallAdd() {
		getCallAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCallAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCallAdd());						
	}
	//documents methods
	 
	public By getDocumentsLocator() {
		return documentsLocator;
	}
	
	public WebElement getDocuments() {
		return getDriver().findElement(documentsLocator);		
	}

	public void goToDocuments() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDocuments()).build().perform();					
	}
	
	public void clickDocuments() {
		getDocuments().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDocuments()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDocuments());								
	}
	//documentAdd methods
	
	public By getDocumentAddLocator() {
		return documentAddLocator;
	}
	
	public WebElement getDocumentAdd() {
		goToDocuments();
		return getDriver().findElement(documentAddLocator);
	}

	public void goToDocumentAdd() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDocumentAdd()).build().perform();						
	}
	
	public void clickDocumentAdd() {
		getDocumentAdd().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDocumentAdd()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDocumentAdd());						
	}
	//email methods
	 
	public By getEmailLocator() {
		return emailLocator;
	}
	
	public WebElement getEmail() {
		return getDriver().findElement(emailLocator);		
	}

	public void goToEmail() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getEmail()).build().perform();					
	}
	
	public void clickEmail() {
		getEmail().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getEmail()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getEmail());								
	}
	//campaigns methods
	 
	public By getCampaignsLocator() {
		return campaignsLocator;
	}
	
	public WebElement getCampaigns() {
		return getDriver().findElement(campaignsLocator);		
	}

	public void goToCampaigns() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getCampaigns()).build().perform();					
	}
	
	public void clickCampaigns() {
		getCampaigns().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getCampaigns()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getCampaigns());								
	}
	//forms methods
	 
	public By getFormsLocator() {
		return formsLocator;
	}
	
	public WebElement getForms() {
		return getDriver().findElement(formsLocator);		
	}

	public void goToForms() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getForms()).build().perform();					
	}
	
	public void clickForms() {
		getForms().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getForms()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getForms());								
	}
	//nameDisplay methods
	 
	public By getNameDisplayLocator() {
		return nameDisplayLocator;
	}
	
	public WebElement getNameDisplay() {
		return getDriver().findElement(nameDisplayLocator);		
	}

	public void goToNameDisplay() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getNameDisplay()).build().perform();					
	}
	
	public void clickNameDisplay() {
		getNameDisplay().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getNameDisplay()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getNameDisplay());								
	}
	//pinnedRecords methods
	 
	public By getPinnedRecordsLocator() {
		return pinnedRecordsLocator;
	}
	
	public WebElement getPinnedRecords() {
		return getDriver().findElement(pinnedRecordsLocator);		
	}

	public void goToPinnedRecords() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getPinnedRecords()).build().perform();					
	}
	
	public void clickPinnedRecords() {
		getPinnedRecords().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getPinnedRecords()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getPinnedRecords());								
	}
	//deleteRecords methods
	 
	public By getDeleteRecordsLocator() {
		return deleteRecordsLocator;
	}
	
	public WebElement getDeleteRecords() {
		return getDriver().findElement(deleteRecordsLocator);		
	}

	public void goToDeleteRecords() {
		Actions actions = new Actions(getDriver());
		actions.moveToElement(getDeleteRecords()).build().perform();					
	}
	
	public void clickDeleteRecords() {
		getDeleteRecords().click();
		//Alternative 1:  new Actions(getDriver()).moveToElement(getDeleteRecords()).click().build().perform();
		//Alternative 2:  ((JavascriptExecutor)getDriver()).executeScript("arguments[0].click()", getDeleteRecords());								
	}

}